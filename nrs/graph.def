proc Graph:LoadGraph4 {filename {graph {}}} {

    global tk_status
    global GrXY Graph sigs
    set Graph(result) Passed

    # Display feedback to user
    set tk_status {Open Graph: Creating Graph}
    # update idletasks

    set graphpath [string trimright $filename graph.def]
    if {$graph=={}} {
        # Load needed plotfiles if absent

        set pfwf [Graph:GetSigs3 $graphpath {{{{../TestPreemp.ac0 vdb(2)}} {} {} 0} {{{../TestDeemp.ac0 vdb(2)}} {} {} 0} {{{../driver.ac0 vdb(3)}} {} {} 0}}]

        set pf [lindex $pfwf 0 ]

        set wf [lindex $pfwf 1 ]

        set missingWfIdx [lindex $pfwf 2 ]

        set sigs(wfIdx,load) [lindex $pfwf 3 ]

        # Create the new graph
        set graph [GrXY:NewGraphConfig  {-type xy -font {-family {OF Helvetica} -size 10} -fg {white} -bg {black} -actfg {red} 	        -graphbg {black} -legend right -legendaxisdisplay 1 -grid no 		-sighi legend -maxforfb 10000 		-minwidth 2 -minheight 2 -gridtype - -gridlinestyle {-  } 		-gridlinewidth 1 -gridlinecolor white -subgridlinestyle {-  }                 -subgridlinewidth 1 -subgridlinecolor white -griddashlength 1                 -siglinewidth 1 -rainbow 0 -ptreduct 10000 -sigcolors {green magenta cyan yellow #FF8000 #89ffbb #edbfff #0080FF #ffd016 #ff74bd} -prezoom {0.000000e+000 0.000000e+000 1.000000e+000 0.000000e+000} -signames {leaf} -anatracehi 2 -digitracehi 1 -digisnap 0 -busdisp hex} {1908} {968}]
    } else {
        # Load needed plotfiles if absent

        set pfwf [Graph:GetSigs3 $graphpath {{{{../TestPreemp.ac0 vdb(2)}} {} {} 0} {{{../TestDeemp.ac0 vdb(2)}} {} {} 0} {{{../driver.ac0 vdb(3)}} {} {} 0}} 0]

        set pf [lindex $pfwf 0 ]

        set wf [lindex $pfwf 1 ]

        set missingWfIdx [lindex $pfwf 2 ]

        set sigs(wfIdx,load) [lindex $pfwf 3 ]

        # Reconfigure graph
        Graph:Select $graph
        Graph itemselect all add
        Graph delsignal selected
        Graph:ClearItems
        $graph config -type xy -font {-family {OF Helvetica} -size 10} -fg {white} -bg {black} -actfg {red} 	        -graphbg {black} -legend right -legendaxisdisplay 1 -grid no 		-sighi legend -maxforfb 10000 		-minwidth 2 -minheight 2 -gridtype - -gridlinestyle {-  } 		-gridlinewidth 1 -gridlinecolor white -subgridlinestyle {-  }                 -subgridlinewidth 1 -subgridlinecolor white -griddashlength 1                 -siglinewidth 1 -rainbow 0 -ptreduct 10000 -sigcolors {green magenta cyan yellow #FF8000 #89ffbb #edbfff #0080FF #ffd016 #ff74bd} -prezoom {0.000000e+000 0.000000e+000 1.000000e+000 0.000000e+000} -signames {leaf} -anatracehi 2 -digitracehi 1 -digisnap 0 -busdisp hex
    }
    global $graph
    set canvas [set $graph]
    # Set graph colormap
    set Graph($graph,cmap) 1

    # Configure Graph Title
    $graph itemconfig GraphTitle -text {Graph4}

    # Restore Mem Label variables
    # Add the signals to the graph with appropriate attributes
    set configs {-region {2 1 0} -yview {real(y) real(y) real(y)} -xview {real(x) real(x) real(x)} -rainbow {0 0 0} -rbcolors {{} {} {}} -fill {cyan magenta green} -linestyle {- - -} -width {1 1 1} -symbol {{} {} {}} -symwidth {10 10 10} -bar {{} {} {}} -barwidth {0 0 0} -baseline {0.0 0.0 0.0} -stipple {{} {} {}} -label {vdb(2) vdb(2) vdb(3)} -xaxis {0 0 0} -yaxis {0 0 0} -tracehi {2 2 2} -bus {{} {} {}} -segdisp {y y y} -monotonicdisp {0 0 0} -index {29 28 27}}

    if {$missingWfIdx != ""} {
        set configs [Graph:ResetSigConfigs1 $configs $missingWfIdx]
    }

    set allsigs [eval $graph addsignal {$wf} $configs]

    set s_i 0
    foreach s $allsigs {
        set w_i [lindex $sigs(wfIdx,load) $s_i]
        # use to update axis
        set sigs($s,savedIdx,load) $w_i
        # use to update measurement
        set sigs($w_i,signal,load) $s
        incr s_i
    }

    # Configure the axes
    set numSavedSigs 3
    set ax(0,xaxis,saved) AxisX(0)
    set ax(0,yaxis,saved) AxisY(2,0)
    set ax(1,xaxis,saved) AxisX(0)
    set ax(1,yaxis,saved) AxisY(1,0)
    set ax(2,xaxis,saved) AxisX(0)
    set ax(2,yaxis,saved) AxisY(0,0)
    set ax(AxisY(0,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-2.7567937374115 2.7289242744446} -unitscale {auto}}
    set ax(AxisX(0),configs,saved) {-scale {log} -gridvis {no} -linticks {} -logticks {1 1} -subticks {8} -label {f(Hz)} -digiview {} -lock {no} -slider {no} -range {100.0 10000.0} -unitscale {auto}}
    set ax(AxisY(1,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-31.091382980347 0.21805027127266} -unitscale {auto}}
    set ax(AxisY(2,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-0.36803233623505 28.33434677124} -unitscale {auto}}
    set ax(AxisY(0,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-2.7567937374115 2.7289242744446} -unitscale {auto}}
    set ax(AxisX(0),configs,saved) {-scale {log} -gridvis {no} -linticks {} -logticks {1 1} -subticks {8} -label {f(Hz)} -digiview {} -lock {no} -slider {no} -range {100.0 10000.0} -unitscale {auto}}
    set ax(AxisY(1,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-31.091382980347 0.21805027127266} -unitscale {auto}}
    set ax(AxisY(2,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-0.36803233623505 28.33434677124} -unitscale {auto}}
    set ax(AxisY(0,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-2.7567937374115 2.7289242744446} -unitscale {auto}}
    set ax(AxisX(0),configs,saved) {-scale {log} -gridvis {no} -linticks {} -logticks {1 1} -subticks {8} -label {f(Hz)} -digiview {} -lock {no} -slider {no} -range {100.0 10000.0} -unitscale {auto}}
    set ax(AxisY(1,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-31.091382980347 0.21805027127266} -unitscale {auto}}
    set ax(AxisY(2,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-0.36803233623505 28.33434677124} -unitscale {auto}}
    set ax(AxisY(0,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-2.7567937374115 2.7289242744446} -unitscale {auto}}
    set ax(AxisX(0),configs,saved) {-scale {log} -gridvis {no} -linticks {} -logticks {1 1} -subticks {8} -label {f(Hz)} -digiview {} -lock {no} -slider {no} -range {100.0 10000.0} -unitscale {auto}}
    set ax(AxisY(1,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-31.091382980347 0.21805027127266} -unitscale {auto}}
    set ax(AxisY(2,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-0.36803233623505 28.33434677124} -unitscale {auto}}
    set ax(AxisY(0,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-2.7567937374115 2.7289242744446} -unitscale {auto}}
    set ax(AxisX(0),configs,saved) {-scale {log} -gridvis {no} -linticks {} -logticks {1 1} -subticks {8} -label {f(Hz)} -digiview {} -lock {no} -slider {no} -range {100.0 10000.0} -unitscale {auto}}
    set ax(AxisY(1,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-31.091382980347 0.21805027127266} -unitscale {auto}}
    set ax(AxisY(2,0),configs,saved) {-scale {linear} -gridvis {no} -linticks {} -logticks {} -subticks {0} -label {(dBV)} -digiview {} -lock {no} -slider {no} -range {-0.36803233623505 28.33434677124} -unitscale {auto}}

    set ax(list) ""
    set items [$canvas find all]
    foreach item $items {
        set type [$canvas type $item]
        if {($type == "xaxis")||($type == "yaxis")||($type == "polaraxis")} {
            if {$type == "polaraxis"} {
                set axis [lindex [lindex [$canvas itemconfig $item -tags] 4] 0]
            } else {
                set axis [lindex [lindex [$canvas itemconfig $item -tags] 4] 1]
            }
            lappend ax(list) $axis
        }
    }

    foreach axis $ax(list) {
        set siglist [Graph:GetAllSigsOnAxis1 $axis $allsigs]

        set sig [lindex $siglist 0]
        set savedIdx $sigs($sig,savedIdx,load)
        if {[string match AxisX* $axis]} {
            set savedXAxis $ax($savedIdx,xaxis,saved)
            set savedXAxisConfigs $ax($savedXAxis,configs,saved)
            eval $graph axisconfig $axis $savedXAxisConfigs
        } elseif {[string match AxisY* $axis]} {
            set savedYAxis $ax($savedIdx,yaxis,saved)
            set savedYAxisConfigs $ax($savedYAxis,configs,saved)
            eval $graph axisconfig $axis $savedYAxisConfigs
        } else {
            set savedAxisConfigs $ax($axis,configs,saved)
            eval $graph axisconfig $axis $savedAxisConfigs
        }
    }


    # Restore Measurements
    set sigs(Signal29,idx,saved) 0
    set sigs(Signal28,idx,saved) 1
    set sigs(Signal27,idx,saved) 2
global Meas_${graph}
    global Meas
    set Meas(tool,xrXStart) start
    set Meas(tool,xrXEnd) end
    set Meas(tool,xrYStart) start
    set Meas(tool,xrYEnd) end
if {[lsearch $sigs(wfIdx,load) $sigs(Signal27,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:AtX $graph Signal27 {200 --} xyrangeAll 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {At X} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblx) 30
  set Meas_${graph}_${mindex}(0,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal27,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:AtX $graph Signal27 {5000 --} xyrangeAll 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {At X} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblx) 30
  set Meas_${graph}_${mindex}(0,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal27,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:Levels $graph Signal27  {Minimum Maximum} xyrangeAll 0 -  activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {Levels} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblanchor)  ne
  set Meas_${graph}_${mindex}(1,lblanchor)  se
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal27,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:AtX $graph Signal27 {100 --} xyrangeAll 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {At X} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblx) 30
  set Meas_${graph}_${mindex}(0,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal28,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:AtX $graph Signal28 {200 --} xyrangeAll 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {At X} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblx) 30
  set Meas_${graph}_${mindex}(0,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal28,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:AtX $graph Signal28 {5000 --} xyrangeAll 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {At X} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblx) 30
  set Meas_${graph}_${mindex}(0,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal28,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:Levels $graph Signal28  {Minimum} xyrangeAll 0 -  activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {Levels} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblanchor)  ne
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal28,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:AtX $graph Signal28 {100 --} xyrangeAll 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {At X} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblx) 30
  set Meas_${graph}_${mindex}(0,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal28,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:HighLow $graph Signal28  {Lowpass} default - 3 xyrangeAll  0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {Lowpass} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(1,lblx) 30
  set Meas_${graph}_${mindex}(1,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal28,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:HighLow $graph Signal28  {Highpass} default - 3 xyrangeAll  0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {Highpass} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(1,lblx) 30
  set Meas_${graph}_${mindex}(1,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal29,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:AtX $graph Signal29 {200 --} xyrangeAll 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {At X} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblx) 30
  set Meas_${graph}_${mindex}(0,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal29,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:AtX $graph Signal29 {5000 --} xyrangeAll 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {At X} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblx) 30
  set Meas_${graph}_${mindex}(0,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal29,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:Levels $graph Signal29  {Maximum} xyrangeAll 0 -  activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {Levels} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblanchor)  se
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal29,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:AtX $graph Signal29 {100 --} xyrangeAll 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {At X} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(0,lblx) 30
  set Meas_${graph}_${mindex}(0,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal29,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:HighLow $graph Signal29  {Lowpass} default - 3 xyrangeAll  0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {Lowpass} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(1,lblx) 30
  set Meas_${graph}_${mindex}(1,lbly) 30
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal29,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:HighLow $graph Signal29  {Highpass} default - 3 xyrangeAll  0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1} {Highpass} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(1,lblx) 30
  set Meas_${graph}_${mindex}(1,lbly) 30
}
}
}

    # Restore Markers


    # Restore Mem Label positions
    $graph raise MemLbl

    # Clear feedback
    set tk_status {}
    #update idletasks
}

# Call the new procedure
if [catch {AimBusy "Graph:LoadGraph4 $Graph(filename) $graph" . watch} msg] {
    AimMessage $msg error "Cant Read Graph" modal
}
# Delete the new procedure
rename Graph:LoadGraph4 {}
